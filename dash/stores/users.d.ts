import { type UserSearchParams } from '@/services/users';
export declare const useUsersStore: import("pinia").StoreDefinition<"users", Pick<{
    users: import("vue").Ref<any[], any[] | User[]>;
    currentUser: import("vue").Ref<any, any>;
    userStats: import("vue").Ref<any, any>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    searchQuery: import("vue").Ref<string, string>;
    currentPage: import("vue").Ref<number, number>;
    pageSize: import("vue").Ref<number, number>;
    totalUsers: import("vue").Ref<number, number>;
    filters: import("vue").Ref<{
        skip?: number | undefined;
        limit?: number | undefined;
        include_deleted?: boolean | undefined;
        is_active?: boolean | undefined;
        is_verified?: boolean | undefined;
        role_id?: string | undefined;
        search?: string | undefined;
    }, UserSearchParams | {
        skip?: number | undefined;
        limit?: number | undefined;
        include_deleted?: boolean | undefined;
        is_active?: boolean | undefined;
        is_verified?: boolean | undefined;
        role_id?: string | undefined;
        search?: string | undefined;
    }>;
    activeUsers: import("vue").ComputedRef<any[]>;
    inactiveUsers: import("vue").ComputedRef<any[]>;
    verifiedUsers: import("vue").ComputedRef<any[]>;
    unverifiedUsers: import("vue").ComputedRef<any[]>;
    totalPages: import("vue").ComputedRef<number>;
    fetchUsers: (force?: boolean) => Promise<any[]>;
    fetchUserStats: () => Promise<import("../types").UserStats>;
    fetchUser: (userId: string, includeDeleted?: boolean) => Promise<import("../types").User>;
    createUser: (userData: UserCreate) => Promise<import("../types").User>;
    updateUser: (userId: string, userData: UserUpdate) => Promise<import("../types").User>;
    deleteUser: (userId: string, hardDelete?: boolean) => Promise<void>;
    restoreUser: (userId: string) => Promise<import("../types").User>;
    activateUser: (userId: string) => Promise<import("../types").User>;
    deactivateUser: (userId: string) => Promise<import("../types").User>;
    verifyUserEmail: (userId: string) => Promise<import("../types").User>;
    searchUsers: (query: string) => Promise<void>;
    setFilters: (newFilters: Partial<UserSearchParams>) => Promise<void>;
    setPage: (page: number) => Promise<void>;
    setPageSize: (size: number) => Promise<void>;
    clearError: () => void;
    reset: () => void;
}, "loading" | "error" | "users" | "currentUser" | "userStats" | "searchQuery" | "currentPage" | "pageSize" | "totalUsers" | "filters">, Pick<{
    users: import("vue").Ref<any[], any[] | User[]>;
    currentUser: import("vue").Ref<any, any>;
    userStats: import("vue").Ref<any, any>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    searchQuery: import("vue").Ref<string, string>;
    currentPage: import("vue").Ref<number, number>;
    pageSize: import("vue").Ref<number, number>;
    totalUsers: import("vue").Ref<number, number>;
    filters: import("vue").Ref<{
        skip?: number | undefined;
        limit?: number | undefined;
        include_deleted?: boolean | undefined;
        is_active?: boolean | undefined;
        is_verified?: boolean | undefined;
        role_id?: string | undefined;
        search?: string | undefined;
    }, UserSearchParams | {
        skip?: number | undefined;
        limit?: number | undefined;
        include_deleted?: boolean | undefined;
        is_active?: boolean | undefined;
        is_verified?: boolean | undefined;
        role_id?: string | undefined;
        search?: string | undefined;
    }>;
    activeUsers: import("vue").ComputedRef<any[]>;
    inactiveUsers: import("vue").ComputedRef<any[]>;
    verifiedUsers: import("vue").ComputedRef<any[]>;
    unverifiedUsers: import("vue").ComputedRef<any[]>;
    totalPages: import("vue").ComputedRef<number>;
    fetchUsers: (force?: boolean) => Promise<any[]>;
    fetchUserStats: () => Promise<import("../types").UserStats>;
    fetchUser: (userId: string, includeDeleted?: boolean) => Promise<import("../types").User>;
    createUser: (userData: UserCreate) => Promise<import("../types").User>;
    updateUser: (userId: string, userData: UserUpdate) => Promise<import("../types").User>;
    deleteUser: (userId: string, hardDelete?: boolean) => Promise<void>;
    restoreUser: (userId: string) => Promise<import("../types").User>;
    activateUser: (userId: string) => Promise<import("../types").User>;
    deactivateUser: (userId: string) => Promise<import("../types").User>;
    verifyUserEmail: (userId: string) => Promise<import("../types").User>;
    searchUsers: (query: string) => Promise<void>;
    setFilters: (newFilters: Partial<UserSearchParams>) => Promise<void>;
    setPage: (page: number) => Promise<void>;
    setPageSize: (size: number) => Promise<void>;
    clearError: () => void;
    reset: () => void;
}, "activeUsers" | "inactiveUsers" | "verifiedUsers" | "unverifiedUsers" | "totalPages">, Pick<{
    users: import("vue").Ref<any[], any[] | User[]>;
    currentUser: import("vue").Ref<any, any>;
    userStats: import("vue").Ref<any, any>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    searchQuery: import("vue").Ref<string, string>;
    currentPage: import("vue").Ref<number, number>;
    pageSize: import("vue").Ref<number, number>;
    totalUsers: import("vue").Ref<number, number>;
    filters: import("vue").Ref<{
        skip?: number | undefined;
        limit?: number | undefined;
        include_deleted?: boolean | undefined;
        is_active?: boolean | undefined;
        is_verified?: boolean | undefined;
        role_id?: string | undefined;
        search?: string | undefined;
    }, UserSearchParams | {
        skip?: number | undefined;
        limit?: number | undefined;
        include_deleted?: boolean | undefined;
        is_active?: boolean | undefined;
        is_verified?: boolean | undefined;
        role_id?: string | undefined;
        search?: string | undefined;
    }>;
    activeUsers: import("vue").ComputedRef<any[]>;
    inactiveUsers: import("vue").ComputedRef<any[]>;
    verifiedUsers: import("vue").ComputedRef<any[]>;
    unverifiedUsers: import("vue").ComputedRef<any[]>;
    totalPages: import("vue").ComputedRef<number>;
    fetchUsers: (force?: boolean) => Promise<any[]>;
    fetchUserStats: () => Promise<import("../types").UserStats>;
    fetchUser: (userId: string, includeDeleted?: boolean) => Promise<import("../types").User>;
    createUser: (userData: UserCreate) => Promise<import("../types").User>;
    updateUser: (userId: string, userData: UserUpdate) => Promise<import("../types").User>;
    deleteUser: (userId: string, hardDelete?: boolean) => Promise<void>;
    restoreUser: (userId: string) => Promise<import("../types").User>;
    activateUser: (userId: string) => Promise<import("../types").User>;
    deactivateUser: (userId: string) => Promise<import("../types").User>;
    verifyUserEmail: (userId: string) => Promise<import("../types").User>;
    searchUsers: (query: string) => Promise<void>;
    setFilters: (newFilters: Partial<UserSearchParams>) => Promise<void>;
    setPage: (page: number) => Promise<void>;
    setPageSize: (size: number) => Promise<void>;
    clearError: () => void;
    reset: () => void;
}, "reset" | "fetchUsers" | "fetchUserStats" | "fetchUser" | "createUser" | "updateUser" | "deleteUser" | "restoreUser" | "activateUser" | "deactivateUser" | "verifyUserEmail" | "searchUsers" | "setFilters" | "setPage" | "setPageSize" | "clearError">>;
