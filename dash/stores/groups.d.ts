/**
 * Groups store for managing group data and operations.
 *
 * This store provides state management for groups including:
 * - Group listing and filtering
 * - Group creation, updating, and deletion
 * - Group membership management
 * - User group associations
 */
import type { Group, GroupCreate, GroupUpdate, GroupWithMembers, GroupMembershipRequest, GroupMembershipUpdate, UserInGroup } from '@/types';
export interface GroupState {
    groups: Group[];
    currentGroup: GroupWithMembers | null;
    loading: boolean;
    error: string | null;
    pagination: {
        page: number;
        size: number;
        total: number;
        totalPages: number;
    };
    filters: {
        search: string;
        groupType: string | null;
        isPublic: boolean | null;
        ownerId: string | null;
        orderBy: string;
        orderDirection: 'asc' | 'desc';
    };
}
export declare const useGroupsStore: import("pinia").StoreDefinition<"groups", Pick<{
    groups: import("vue").Ref<{
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[], Group[] | {
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[]>;
    currentGroup: import("vue").Ref<{
        members?: {
            user_id: string;
            group_id: string;
            role_in_group: string;
            joined_at: string;
            is_active: boolean;
            metadata?: Record<string, any> | undefined;
            user?: {
                id: string;
                username: string;
                email: string;
                first_name?: string | undefined;
                last_name?: string | undefined;
                bio?: string | undefined;
                profile_picture_url?: string | undefined;
                is_active: boolean;
                is_verified: boolean;
                email_verified: boolean;
                last_login?: string | undefined;
                created_at?: string | undefined;
                updated_at?: string | undefined;
                role_id?: string | undefined;
                is_oauth_user: boolean;
                oauth_provider?: string | undefined;
            } | undefined;
        }[] | undefined;
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    } | null, GroupWithMembers | {
        members?: {
            user_id: string;
            group_id: string;
            role_in_group: string;
            joined_at: string;
            is_active: boolean;
            metadata?: Record<string, any> | undefined;
            user?: {
                id: string;
                username: string;
                email: string;
                first_name?: string | undefined;
                last_name?: string | undefined;
                bio?: string | undefined;
                profile_picture_url?: string | undefined;
                is_active: boolean;
                is_verified: boolean;
                email_verified: boolean;
                last_login?: string | undefined;
                created_at?: string | undefined;
                updated_at?: string | undefined;
                role_id?: string | undefined;
                is_oauth_user: boolean;
                oauth_provider?: string | undefined;
            } | undefined;
        }[] | undefined;
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    } | null>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    pagination: import("vue").Ref<{
        page: number;
        size: number;
        total: number;
        totalPages: number;
    }, {
        page: number;
        size: number;
        total: number;
        totalPages: number;
    } | {
        page: number;
        size: number;
        total: number;
        totalPages: number;
    }>;
    filters: import("vue").Ref<{
        search: string;
        groupType: string | null;
        isPublic: boolean | null;
        ownerId: string | null;
        orderBy: string;
        orderDirection: "desc" | "asc";
    }, {
        search: string;
        groupType: string | null;
        isPublic: boolean | null;
        ownerId: string | null;
        orderBy: string;
        orderDirection: "desc" | "asc";
    } | {
        search: string;
        groupType: string | null;
        isPublic: boolean | null;
        ownerId: string | null;
        orderBy: string;
        orderDirection: "desc" | "asc";
    }>;
    publicGroups: import("vue").ComputedRef<{
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[]>;
    userGroups: import("vue").ComputedRef<{
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[]>;
    memberGroups: import("vue").ComputedRef<{
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[]>;
    hasGroups: import("vue").ComputedRef<boolean>;
    isLoading: import("vue").ComputedRef<boolean>;
    fetchGroups: (resetPagination?: boolean) => Promise<void>;
    fetchGroup: (groupId: string, includeMembers?: boolean) => Promise<void>;
    fetchGroupBySlug: (slug: string, includeMembers?: boolean) => Promise<void>;
    createGroup: (groupData: GroupCreate) => Promise<Group | null>;
    updateGroup: (groupId: string, groupData: GroupUpdate) => Promise<Group | null>;
    deleteGroup: (groupId: string) => Promise<boolean>;
    addUsersToGroup: (groupId: string, membershipRequest: GroupMembershipRequest) => Promise<UserInGroup[] | null>;
    removeUserFromGroup: (groupId: string, userId: string) => Promise<boolean>;
    updateUserMembership: (groupId: string, userId: string, membershipData: GroupMembershipUpdate) => Promise<UserInGroup | null>;
    setSearch: (search: string) => void;
    setGroupType: (groupType: string | null) => void;
    setIsPublic: (isPublic: boolean | null) => void;
    setOwnerId: (ownerId: string | null) => void;
    setOrderBy: (orderBy: string, orderDirection?: 'asc' | 'desc') => void;
    setPage: (page: number) => void;
    setPageSize: (size: number) => void;
    resetFilters: () => void;
    clearError: () => void;
    clearCurrentGroup: () => void;
}, "loading" | "error" | "groups" | "filters" | "currentGroup" | "pagination">, Pick<{
    groups: import("vue").Ref<{
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[], Group[] | {
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[]>;
    currentGroup: import("vue").Ref<{
        members?: {
            user_id: string;
            group_id: string;
            role_in_group: string;
            joined_at: string;
            is_active: boolean;
            metadata?: Record<string, any> | undefined;
            user?: {
                id: string;
                username: string;
                email: string;
                first_name?: string | undefined;
                last_name?: string | undefined;
                bio?: string | undefined;
                profile_picture_url?: string | undefined;
                is_active: boolean;
                is_verified: boolean;
                email_verified: boolean;
                last_login?: string | undefined;
                created_at?: string | undefined;
                updated_at?: string | undefined;
                role_id?: string | undefined;
                is_oauth_user: boolean;
                oauth_provider?: string | undefined;
            } | undefined;
        }[] | undefined;
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    } | null, GroupWithMembers | {
        members?: {
            user_id: string;
            group_id: string;
            role_in_group: string;
            joined_at: string;
            is_active: boolean;
            metadata?: Record<string, any> | undefined;
            user?: {
                id: string;
                username: string;
                email: string;
                first_name?: string | undefined;
                last_name?: string | undefined;
                bio?: string | undefined;
                profile_picture_url?: string | undefined;
                is_active: boolean;
                is_verified: boolean;
                email_verified: boolean;
                last_login?: string | undefined;
                created_at?: string | undefined;
                updated_at?: string | undefined;
                role_id?: string | undefined;
                is_oauth_user: boolean;
                oauth_provider?: string | undefined;
            } | undefined;
        }[] | undefined;
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    } | null>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    pagination: import("vue").Ref<{
        page: number;
        size: number;
        total: number;
        totalPages: number;
    }, {
        page: number;
        size: number;
        total: number;
        totalPages: number;
    } | {
        page: number;
        size: number;
        total: number;
        totalPages: number;
    }>;
    filters: import("vue").Ref<{
        search: string;
        groupType: string | null;
        isPublic: boolean | null;
        ownerId: string | null;
        orderBy: string;
        orderDirection: "desc" | "asc";
    }, {
        search: string;
        groupType: string | null;
        isPublic: boolean | null;
        ownerId: string | null;
        orderBy: string;
        orderDirection: "desc" | "asc";
    } | {
        search: string;
        groupType: string | null;
        isPublic: boolean | null;
        ownerId: string | null;
        orderBy: string;
        orderDirection: "desc" | "asc";
    }>;
    publicGroups: import("vue").ComputedRef<{
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[]>;
    userGroups: import("vue").ComputedRef<{
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[]>;
    memberGroups: import("vue").ComputedRef<{
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[]>;
    hasGroups: import("vue").ComputedRef<boolean>;
    isLoading: import("vue").ComputedRef<boolean>;
    fetchGroups: (resetPagination?: boolean) => Promise<void>;
    fetchGroup: (groupId: string, includeMembers?: boolean) => Promise<void>;
    fetchGroupBySlug: (slug: string, includeMembers?: boolean) => Promise<void>;
    createGroup: (groupData: GroupCreate) => Promise<Group | null>;
    updateGroup: (groupId: string, groupData: GroupUpdate) => Promise<Group | null>;
    deleteGroup: (groupId: string) => Promise<boolean>;
    addUsersToGroup: (groupId: string, membershipRequest: GroupMembershipRequest) => Promise<UserInGroup[] | null>;
    removeUserFromGroup: (groupId: string, userId: string) => Promise<boolean>;
    updateUserMembership: (groupId: string, userId: string, membershipData: GroupMembershipUpdate) => Promise<UserInGroup | null>;
    setSearch: (search: string) => void;
    setGroupType: (groupType: string | null) => void;
    setIsPublic: (isPublic: boolean | null) => void;
    setOwnerId: (ownerId: string | null) => void;
    setOrderBy: (orderBy: string, orderDirection?: 'asc' | 'desc') => void;
    setPage: (page: number) => void;
    setPageSize: (size: number) => void;
    resetFilters: () => void;
    clearError: () => void;
    clearCurrentGroup: () => void;
}, "publicGroups" | "userGroups" | "memberGroups" | "hasGroups" | "isLoading">, Pick<{
    groups: import("vue").Ref<{
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[], Group[] | {
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[]>;
    currentGroup: import("vue").Ref<{
        members?: {
            user_id: string;
            group_id: string;
            role_in_group: string;
            joined_at: string;
            is_active: boolean;
            metadata?: Record<string, any> | undefined;
            user?: {
                id: string;
                username: string;
                email: string;
                first_name?: string | undefined;
                last_name?: string | undefined;
                bio?: string | undefined;
                profile_picture_url?: string | undefined;
                is_active: boolean;
                is_verified: boolean;
                email_verified: boolean;
                last_login?: string | undefined;
                created_at?: string | undefined;
                updated_at?: string | undefined;
                role_id?: string | undefined;
                is_oauth_user: boolean;
                oauth_provider?: string | undefined;
            } | undefined;
        }[] | undefined;
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    } | null, GroupWithMembers | {
        members?: {
            user_id: string;
            group_id: string;
            role_in_group: string;
            joined_at: string;
            is_active: boolean;
            metadata?: Record<string, any> | undefined;
            user?: {
                id: string;
                username: string;
                email: string;
                first_name?: string | undefined;
                last_name?: string | undefined;
                bio?: string | undefined;
                profile_picture_url?: string | undefined;
                is_active: boolean;
                is_verified: boolean;
                email_verified: boolean;
                last_login?: string | undefined;
                created_at?: string | undefined;
                updated_at?: string | undefined;
                role_id?: string | undefined;
                is_oauth_user: boolean;
                oauth_provider?: string | undefined;
            } | undefined;
        }[] | undefined;
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    } | null>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    pagination: import("vue").Ref<{
        page: number;
        size: number;
        total: number;
        totalPages: number;
    }, {
        page: number;
        size: number;
        total: number;
        totalPages: number;
    } | {
        page: number;
        size: number;
        total: number;
        totalPages: number;
    }>;
    filters: import("vue").Ref<{
        search: string;
        groupType: string | null;
        isPublic: boolean | null;
        ownerId: string | null;
        orderBy: string;
        orderDirection: "desc" | "asc";
    }, {
        search: string;
        groupType: string | null;
        isPublic: boolean | null;
        ownerId: string | null;
        orderBy: string;
        orderDirection: "desc" | "asc";
    } | {
        search: string;
        groupType: string | null;
        isPublic: boolean | null;
        ownerId: string | null;
        orderBy: string;
        orderDirection: "desc" | "asc";
    }>;
    publicGroups: import("vue").ComputedRef<{
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[]>;
    userGroups: import("vue").ComputedRef<{
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[]>;
    memberGroups: import("vue").ComputedRef<{
        id: string;
        name: string;
        slug: string;
        description?: string | undefined;
        is_public: boolean;
        is_open: boolean;
        group_type: string;
        tags?: string | undefined;
        max_members?: number | undefined;
        member_count: number;
        owner_id: string;
        owner?: {
            id: string;
            username: string;
            email: string;
            first_name?: string | undefined;
            last_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            is_active: boolean;
            is_verified: boolean;
            email_verified: boolean;
            last_login?: string | undefined;
            created_at?: string | undefined;
            updated_at?: string | undefined;
            role_id?: string | undefined;
            is_oauth_user: boolean;
            oauth_provider?: string | undefined;
        } | undefined;
        created_at: string;
        updated_at: string;
        is_deleted: boolean;
        metadata?: Record<string, any> | undefined;
    }[]>;
    hasGroups: import("vue").ComputedRef<boolean>;
    isLoading: import("vue").ComputedRef<boolean>;
    fetchGroups: (resetPagination?: boolean) => Promise<void>;
    fetchGroup: (groupId: string, includeMembers?: boolean) => Promise<void>;
    fetchGroupBySlug: (slug: string, includeMembers?: boolean) => Promise<void>;
    createGroup: (groupData: GroupCreate) => Promise<Group | null>;
    updateGroup: (groupId: string, groupData: GroupUpdate) => Promise<Group | null>;
    deleteGroup: (groupId: string) => Promise<boolean>;
    addUsersToGroup: (groupId: string, membershipRequest: GroupMembershipRequest) => Promise<UserInGroup[] | null>;
    removeUserFromGroup: (groupId: string, userId: string) => Promise<boolean>;
    updateUserMembership: (groupId: string, userId: string, membershipData: GroupMembershipUpdate) => Promise<UserInGroup | null>;
    setSearch: (search: string) => void;
    setGroupType: (groupType: string | null) => void;
    setIsPublic: (isPublic: boolean | null) => void;
    setOwnerId: (ownerId: string | null) => void;
    setOrderBy: (orderBy: string, orderDirection?: 'asc' | 'desc') => void;
    setPage: (page: number) => void;
    setPageSize: (size: number) => void;
    resetFilters: () => void;
    clearError: () => void;
    clearCurrentGroup: () => void;
}, "setPage" | "setPageSize" | "clearError" | "fetchGroups" | "fetchGroup" | "fetchGroupBySlug" | "createGroup" | "updateGroup" | "deleteGroup" | "addUsersToGroup" | "removeUserFromGroup" | "updateUserMembership" | "setSearch" | "setGroupType" | "setIsPublic" | "setOwnerId" | "setOrderBy" | "resetFilters" | "clearCurrentGroup">>;
export type { GroupState };
