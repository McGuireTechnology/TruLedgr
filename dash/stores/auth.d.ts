import type { User, LoginCredentials, UserCreate } from '@/types';
export declare const useAuthStore: import("pinia").StoreDefinition<"auth", Pick<{
    token: import("vue").Ref<string | null, string | null>;
    user: import("vue").Ref<{
        id: string;
        username: string;
        email: string;
        first_name?: string | undefined;
        last_name?: string | undefined;
        bio?: string | undefined;
        profile_picture_url?: string | undefined;
        is_active: boolean;
        is_verified: boolean;
        email_verified: boolean;
        last_login?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        role_id?: string | undefined;
        is_oauth_user: boolean;
        oauth_provider?: string | undefined;
    } | null, User | {
        id: string;
        username: string;
        email: string;
        first_name?: string | undefined;
        last_name?: string | undefined;
        bio?: string | undefined;
        profile_picture_url?: string | undefined;
        is_active: boolean;
        is_verified: boolean;
        email_verified: boolean;
        last_login?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        role_id?: string | undefined;
        is_oauth_user: boolean;
        oauth_provider?: string | undefined;
    } | null>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    initialized: import("vue").Ref<boolean, boolean>;
    isAuthenticated: import("vue").ComputedRef<boolean>;
    login: (credentials: LoginCredentials) => Promise<any>;
    logout: () => void;
    fetchProfile: () => Promise<void>;
    checkAuth: () => Promise<void>;
    register: (userData: UserCreate) => Promise<any>;
    updateProfile: (userData: Partial<User>) => Promise<any>;
    changePassword: (currentPassword: string, newPassword: string) => Promise<void>;
}, "token" | "user" | "loading" | "error" | "initialized">, Pick<{
    token: import("vue").Ref<string | null, string | null>;
    user: import("vue").Ref<{
        id: string;
        username: string;
        email: string;
        first_name?: string | undefined;
        last_name?: string | undefined;
        bio?: string | undefined;
        profile_picture_url?: string | undefined;
        is_active: boolean;
        is_verified: boolean;
        email_verified: boolean;
        last_login?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        role_id?: string | undefined;
        is_oauth_user: boolean;
        oauth_provider?: string | undefined;
    } | null, User | {
        id: string;
        username: string;
        email: string;
        first_name?: string | undefined;
        last_name?: string | undefined;
        bio?: string | undefined;
        profile_picture_url?: string | undefined;
        is_active: boolean;
        is_verified: boolean;
        email_verified: boolean;
        last_login?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        role_id?: string | undefined;
        is_oauth_user: boolean;
        oauth_provider?: string | undefined;
    } | null>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    initialized: import("vue").Ref<boolean, boolean>;
    isAuthenticated: import("vue").ComputedRef<boolean>;
    login: (credentials: LoginCredentials) => Promise<any>;
    logout: () => void;
    fetchProfile: () => Promise<void>;
    checkAuth: () => Promise<void>;
    register: (userData: UserCreate) => Promise<any>;
    updateProfile: (userData: Partial<User>) => Promise<any>;
    changePassword: (currentPassword: string, newPassword: string) => Promise<void>;
}, "isAuthenticated">, Pick<{
    token: import("vue").Ref<string | null, string | null>;
    user: import("vue").Ref<{
        id: string;
        username: string;
        email: string;
        first_name?: string | undefined;
        last_name?: string | undefined;
        bio?: string | undefined;
        profile_picture_url?: string | undefined;
        is_active: boolean;
        is_verified: boolean;
        email_verified: boolean;
        last_login?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        role_id?: string | undefined;
        is_oauth_user: boolean;
        oauth_provider?: string | undefined;
    } | null, User | {
        id: string;
        username: string;
        email: string;
        first_name?: string | undefined;
        last_name?: string | undefined;
        bio?: string | undefined;
        profile_picture_url?: string | undefined;
        is_active: boolean;
        is_verified: boolean;
        email_verified: boolean;
        last_login?: string | undefined;
        created_at?: string | undefined;
        updated_at?: string | undefined;
        role_id?: string | undefined;
        is_oauth_user: boolean;
        oauth_provider?: string | undefined;
    } | null>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    initialized: import("vue").Ref<boolean, boolean>;
    isAuthenticated: import("vue").ComputedRef<boolean>;
    login: (credentials: LoginCredentials) => Promise<any>;
    logout: () => void;
    fetchProfile: () => Promise<void>;
    checkAuth: () => Promise<void>;
    register: (userData: UserCreate) => Promise<any>;
    updateProfile: (userData: Partial<User>) => Promise<any>;
    changePassword: (currentPassword: string, newPassword: string) => Promise<void>;
}, "login" | "logout" | "fetchProfile" | "checkAuth" | "register" | "updateProfile" | "changePassword">>;
