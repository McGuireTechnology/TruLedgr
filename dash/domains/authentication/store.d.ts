import { type LoginCredentials, type AuthUser } from './api';
export declare const useAuthStore: import("pinia").StoreDefinition<"auth", Pick<{
    user: Readonly<import("vue").Ref<{
        readonly id: string;
        readonly username: string;
        readonly email: string;
        readonly first_name?: string | undefined;
        readonly last_name?: string | undefined;
        readonly is_active: boolean;
        readonly is_verified: boolean;
        readonly email_verified: boolean;
        readonly last_login?: string | undefined;
        readonly created_at?: string | undefined;
        readonly role_id?: string | undefined;
    } | null, {
        readonly id: string;
        readonly username: string;
        readonly email: string;
        readonly first_name?: string | undefined;
        readonly last_name?: string | undefined;
        readonly is_active: boolean;
        readonly is_verified: boolean;
        readonly email_verified: boolean;
        readonly last_login?: string | undefined;
        readonly created_at?: string | undefined;
        readonly role_id?: string | undefined;
    } | null>>;
    token: Readonly<import("vue").Ref<string | null, string | null>>;
    loading: Readonly<import("vue").Ref<boolean, boolean>>;
    error: Readonly<import("vue").Ref<string | null, string | null>>;
    isAuthenticated: import("vue").ComputedRef<boolean>;
    userDisplayName: import("vue").ComputedRef<string>;
    login: (credentials: LoginCredentials) => Promise<import("./api").LoginResponse>;
    logout: (allSessions?: boolean) => Promise<void>;
    fetchUser: () => Promise<AuthUser | null>;
    clearError: () => void;
    initialize: () => Promise<void>;
}, "token" | "user" | "loading" | "error">, Pick<{
    user: Readonly<import("vue").Ref<{
        readonly id: string;
        readonly username: string;
        readonly email: string;
        readonly first_name?: string | undefined;
        readonly last_name?: string | undefined;
        readonly is_active: boolean;
        readonly is_verified: boolean;
        readonly email_verified: boolean;
        readonly last_login?: string | undefined;
        readonly created_at?: string | undefined;
        readonly role_id?: string | undefined;
    } | null, {
        readonly id: string;
        readonly username: string;
        readonly email: string;
        readonly first_name?: string | undefined;
        readonly last_name?: string | undefined;
        readonly is_active: boolean;
        readonly is_verified: boolean;
        readonly email_verified: boolean;
        readonly last_login?: string | undefined;
        readonly created_at?: string | undefined;
        readonly role_id?: string | undefined;
    } | null>>;
    token: Readonly<import("vue").Ref<string | null, string | null>>;
    loading: Readonly<import("vue").Ref<boolean, boolean>>;
    error: Readonly<import("vue").Ref<string | null, string | null>>;
    isAuthenticated: import("vue").ComputedRef<boolean>;
    userDisplayName: import("vue").ComputedRef<string>;
    login: (credentials: LoginCredentials) => Promise<import("./api").LoginResponse>;
    logout: (allSessions?: boolean) => Promise<void>;
    fetchUser: () => Promise<AuthUser | null>;
    clearError: () => void;
    initialize: () => Promise<void>;
}, "isAuthenticated" | "userDisplayName">, Pick<{
    user: Readonly<import("vue").Ref<{
        readonly id: string;
        readonly username: string;
        readonly email: string;
        readonly first_name?: string | undefined;
        readonly last_name?: string | undefined;
        readonly is_active: boolean;
        readonly is_verified: boolean;
        readonly email_verified: boolean;
        readonly last_login?: string | undefined;
        readonly created_at?: string | undefined;
        readonly role_id?: string | undefined;
    } | null, {
        readonly id: string;
        readonly username: string;
        readonly email: string;
        readonly first_name?: string | undefined;
        readonly last_name?: string | undefined;
        readonly is_active: boolean;
        readonly is_verified: boolean;
        readonly email_verified: boolean;
        readonly last_login?: string | undefined;
        readonly created_at?: string | undefined;
        readonly role_id?: string | undefined;
    } | null>>;
    token: Readonly<import("vue").Ref<string | null, string | null>>;
    loading: Readonly<import("vue").Ref<boolean, boolean>>;
    error: Readonly<import("vue").Ref<string | null, string | null>>;
    isAuthenticated: import("vue").ComputedRef<boolean>;
    userDisplayName: import("vue").ComputedRef<string>;
    login: (credentials: LoginCredentials) => Promise<import("./api").LoginResponse>;
    logout: (allSessions?: boolean) => Promise<void>;
    fetchUser: () => Promise<AuthUser | null>;
    clearError: () => void;
    initialize: () => Promise<void>;
}, "login" | "logout" | "fetchUser" | "clearError" | "initialize">>;
