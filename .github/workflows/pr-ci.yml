name: Pull Request CI

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  determine_changes:
    name: Determine changed paths
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      dashboard: ${{ steps.filter.outputs.vue }}
      landing: ${{ steps.filter.outputs.landing }}
      docs: ${{ steps.filter.outputs.docs }}
      global: ${{ steps.filter.outputs.global }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            api:
              - 'api/**'
            dashboard:
              - 'dashboard/**'
            landing:
              - 'landing/**'
            docs:
              - 'docs/**'
            global:
              - '.github/**'
              - 'pyproject.toml'
              - 'package.json'
              - 'mkdocs.yml'

  precommit-setup:
    name: Pre-commit setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install python and pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Check poetry.lock consistency
        run: |
          cd api || true
          poetry lock --check || (echo "poetry.lock out of date; regenerate locally and commit" && exit 1)
      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pre-commit
            .cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-
      - name: Install pre-commit hooks
        run: |
          pre-commit install --install-hooks

  api:
    name: API tests (Python)
    needs: [determine_changes, precommit-setup]
    if: needs.determine_changes.outputs.api == 'true' || needs.determine_changes.outputs.global == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Run pre-commit
        run: |
          pre-commit run --all-files
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache Poetry and pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml','**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Install dependencies (Poetry)
        env:
          POETRY_VIRTUALENVS_IN_PROJECT: true
        run: |
          cd api
          poetry install --no-interaction
      - name: Lint (ruff)
        run: |
          cd api
          poetry run ruff check .
      - name: Format check (black)
        run: |
          cd api
          poetry run black --check .
      - name: Run tests
        run: |
          cd api
          poetry run pytest -q --cov=api --cov-report=xml
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage-xml
          path: api/coverage.xml

  dashboard:
    name: Dashboard tests (Node)
    needs: [determine_changes, precommit-setup]
    if: needs.determine_changes.outputs.dashboard == 'true' || needs.determine_changes.outputs.global == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install pre-commit (JS lint uses npm)
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Run pre-commit
        run: |
          pre-commit run --all-files
      - name: Use Node 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('dashboard/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install and test
        run: |
          cd dashboard
          npm ci
          npm run lint || true
          npm run test

  landing:
    name: Landing tests (Node)
    needs: [determine_changes, precommit-setup]
    if: needs.determine_changes.outputs.landing == 'true' || needs.determine_changes.outputs.global == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install pre-commit (JS lint uses npm)
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Run pre-commit
        run: |
          pre-commit run --all-files
      - name: Use Node 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('landing/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install and test
        run: |
          cd landing
          npm ci
          npm run lint || true
          npm run test
